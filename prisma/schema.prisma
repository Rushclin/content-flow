// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SenderType {
  USER
  ASSISTANT
  SYSTEM
  EXTERNAL
}

model User {
  id         String   @id @default(uuid())
  keycloakId String?  @unique // stocke l'ID provenant de Keycloak (sub)
  email      String?  @unique
  name       String?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  conversations ConversationParticipant[]
  // messages      Message[]                 @relation(fields: [id], references: [id]) // helper relation

  deletedAt    DateTime?
  Conversation Conversation[]

}

model Conversation {
  id          String    @id @default(uuid())
  title       String?
  isGroup     Boolean   @default(false)
  createdById String // owner / creator
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?
  deletedAt   DateTime?

  participants ConversationParticipant[]

  // messages Message[] @relation("ConversationMessages", onDelete: Cascade)

  lastMessageAt DateTime?
  meta          Json? // any extra metadata

  aiModel String?
}

model ConversationParticipant {
  id             String @id @default(uuid())
  conversationId String
  userId         String

  role     String?
  joinedAt DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String @id @default(uuid())
  conversationId String

  senderUserId String? // nullable for assistant/system messages
  senderType   SenderType @default(USER)
  content      String? // plain text
  contentJson  Json? // structured content (blocks, embeddings refs, choices, etc)

  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isEdited  Boolean   @default(false)
  isDeleted Boolean   @default(false)

  sequence Int? // optional monotonic sequence number in conversation

  // conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  // senderUser   User?        @relation("UserMessages", fields: [senderUserId], references: [id], onDelete: SetNull)

  @@index([conversationId, createdAt])
  @@index([senderUserId])
  @@index([sequence])
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  filename  String
  url       String
  mimeType  String?
  size      Int?
  metadata  Json?
  createdAt DateTime @default(now())

  // message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}
